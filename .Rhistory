scale_x_continuous(lim = c(0,quantile(diamonds$carat,0.99))) +
scale_y_continuous(lim = c(0,quantile(diamonds$price,0.99)))
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('memisc')
install.packages('lattice')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp, lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.')))))
ggpairs(diamond_samp, lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(diamond_samp, lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#99DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#99DD9')) +
ggtitle('Price (log10)') +
scale_x_log10()
grid.arrange(plot1,plot2, ncol = 2)
library(gridExtra)
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#099DD9')) +
ggtitle('Price (log10)') +
scale_x_log10()
grid.arrange(plot1,plot2, ncol = 2)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages('RColorBrewer')
install.packages('RColorBrewer')
library(RColorBrewer)
library(ggplot2)
library(ggplot2)
library(GGally)
library(memisc)
set.seed(20022012)
data(diamonds)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
?trans_new
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() cuberoot_trans('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(gridExtra)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',color='clarity') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds, color = 'clarity') +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds, color = clarity) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
library(gridExtra)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
install.package('bitops')
install.package('bitops')
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
library('RCurl')
install.packages('RCurl')
library('bitops')
library('RCurl')
install.packages('RCurl')
library(ggplot2)
data(diamonds)
levels(diamonds$carat)
levels(diamonds$color)
levels(diamonds$table)
levels(diamonds$cut)
?seperate
?separate
?separate
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(gridExtra)
library(extrafont)
?separate
data(countries)
summary(countries)
data(country)
data(states)
data(state)
head(state)
data(state)
head(state)
a <- data(state)
head(a)
summary(a)
summary(a$abb)
map <- map_data("state")
states <- subset(states, ! state.abb %in% c("HI", "AK"))
ggplot(data = map, aes(x = long, y = lat, group = group)) +
# draw outlines of the state
geom_polygon() +
geom_path(colour = 'gray', linestyle = 2) +
coord_map()
install.packages('map')
install.packages('map')
install.packages('maps')
library(ggplot2)
qmap('Karnataka', zoom = 7, maptype = 'hybrid')
install.packages(ggmap)
install.packages('ggmap')
install.packages('ggmap')
library(ggmap)
library(devtools)
install_github("dkahle/ggmap")
install.packages('ggmap')
install.packages('ggmap')
install.packages(c("maps", "mapdata"))
install.packages("maps")
install.packages("map")
library(maps)
library(mapdata)
install.packages("mapdata")
install.packages('mapdata')
map_data
map_data('usa')
library(sp)
library(RColorBrewer)
load("IND_adm1.RData")
load("IND_adm3.RData")
setwd('D:/Data Analyst/R/Indian Election Analysis with R')
setwd('D:/Data Analyst/R/India Election Analysis with R')
load("IND_adm3.RData")
load("IND_adm3.rds")
map('india')
map('India')
map('India')
setRepositories()
?setRepositories
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
available.packages()
library(mapproj)
map(database= "world", regions  = "India", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "India", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,45))
map(database= "world", regions  = "India", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(45,0,45))
map(database= "world", regions  = "India", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,15))
map(database= "world", regions  = "India", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "India", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "World", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "iorld", regions  = "kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "india", regions  = "kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "gujrat", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "china", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "india", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "India", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "China", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "Gujrat", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "world", regions  = "Russia", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "india", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "asia", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
map(database= "asia", regions  = "Kerela", exact=T, col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,90))
load("IND_adm1.RData")
readRDS(IND_adm1.rds, refhook = NULL)
readRDS('IND_adm1.rds', refhook = NULL)
ind1 = gadm
ind1 = readRDS('IND_adm1.rds', refhook = NULL)
spplot(ind1, "NAME_1", scales=list(draw=T), colorkey=F, main="India")
ind1$fake.data
ind1$OBJECTID
ind1$ID_0
ind1$NAME_0
ind1$NAME_1
ind1$HASC_1
ind1$CCN_1
spplot(ind1,"NAME_1",  col.regions=rgb(0,ind1$fake.data,0), colorkey=T, main="Indian States")
warnings()
wb1 = (ind1[ind1$NAME_1=="West Bengal",])
spplot(wb1,"NAME_1", col.regions=rgb(0,0,1), main = "West Bengal, India",scales=list(draw=T), colorkey =F)
wb2 = (ind2[ind2$NAME_1=="West Bengal",])
spplot(wb2,"NAME_1", main = "West Bengal Districts", colorkey =F)
load()
load("IND_adm1.RData")
load("IND_adm1.rds")
spplot(ind1, "NAME_1", scales=list(draw=T), colorkey=F, main="India")
ind1 <- readRDS('IND_adm1.rds', refhook = NULL)
spplot(ind1, "NAME_1", scales=list(draw=T), colorkey=F, main="India")
ind1$NAME_1 = as.factor(ind1$NAME_1)
ind1$fake.data = runif(length(ind1$NAME_1))
spplot(ind1,"NAME_1",  col.regions=rgb(0,ind1$fake.data,0), colorkey=T, main="Indian States")
head(ind1)
head(ind1,1)
spplot(ind1,"NAME_1",  col.regions=rgb(0,(ind1$fake.data/2),0), colorkey=T, main="Indian States")
spplot(ind1,"NAME_1",  col.regions=rgb(155,(ind1$fake.data/2),24), colorkey=T, main="Indian States")
spplot(ind1,"NAME_1",  col.regions=rgb(1,(ind1$fake.data/2),1), colorkey=T, main="Indian States")
spplot(ind1,"NAME_1",  col.regions=rgb(0,(ind1$fake.data/2),1), colorkey=T, main="Indian States")
ind1$NAME_1
spplot(ind1,"NAME_1",  col.regions=rgb(0,ind1$fake.data,0), colorkey=T, main="Indian States")
length(ind1$NAME_1)
ind1$fake.data
state_election = read.table('statelection.tab',sep="\t", header=TRUE)
state_election = read.table('statelection.tab',sep="\t", header=TRUE)
national_election = read.table('nationalelection.tab',sep="\t", header=TRUE)
state_election$proportion = state_election$totvotpoll / state_election$electors
national_election$proportion = national_election$totvotpoll / national_election$electors
national_election.winner_vote <- national_election %>%
group_by(st_name, year,pc_no) %>%
summarise(won_loose = max(totvotpoll))
library(dplyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(gridExtra)
library(extrafont)
national_election.winner_vote <- national_election %>%
group_by(st_name, year,pc_no) %>%
summarise(won_loose = max(totvotpoll))
head(national_election.winner_vote)
head(national_election.winner_vote,10)
head(national_election.winner_vote,20)
state_election.winner_vote <- state_election %>%
group_by(st_name, year,ac_no) %>%
summarise(won_loose = max(totvotpoll))
Nat_election <-
merge(national_election,national_election.winner_vote, by = c('st_name','year','pc_no'),x.all = TRUE )
Nat_election
NROW(national_election)
NROW(Nat_election)
summary(Nat_election)
Nat_election[Nat_election$won_loose == 0]
Nat_election[won_loose == 0]
Nat_election['won_loose' == 0]
subset(Nat_election,won_loose == 0)
subset(national_election,totvotepoll == 0)
subset(national_election,totvotpoll == 0)
St_election <-
merge(state_election,state_election.winner_vote, by = c('st_name','year','ac_no'),x.all = TRUE )
Nat_election$won = ifelse(Nat_election$totvotpoll == Nat_election$won_loose,TRUE, FALSE)
St_election$won = ifelse(St_election$totvotpoll == St_election$won_loose,TRUE, FALSE)
summary(St_election$won)
summary(Nat_election$won)
subset(St_election,is.na(won))
subsetNat_election,is.na(won))
subset(Nat_election,is.na(won))
subset(Nat_election,won == 0)
subset(Nat_election,won_loose == 0)
summary(St_election$won)
summary(St_election)
subset(St_election,won_loose == 0)
NROW(subset(St_election,won_loose == 0))
summary(Nat_election)
summary(St_election)
library(dplyr)
library(ggplot2)
library(scales)
library(gridExtra)
setwd("D:/Data Analyst/R/India Election Analysis with R")
state_election = read.table('statelection.tab',sep="\t", header=TRUE)
state_election = read.table('statelection.tab',sep="\t", header=TRUE)
national_election = read.table('nationalelection.tab',sep="\t", header=TRUE)
dim(state_election)
dim(national_election)
str(state_election)
str(national_election)
state_election$proportion = state_election$totvotpoll / state_election$electors
national_election$proportion = national_election$totvotpoll / national_election$electors
head(state_election)
head(national_election)
national_election.winner_vote <- national_election %>%
group_by(st_name, year,pc_no) %>%
summarise(win_vote = max(totvotpoll))
state_election.winner_vote <- state_election %>%
filter(!is.na(totvotpoll)) %>%
group_by(st_name, year,ac_no) %>%
summarise(win_vote = max(totvotpoll))
Nat_election <-
merge(national_election,national_election.winner_vote, by = c('st_name','year','pc_no'),x.all = TRUE )
St_election <-
merge(state_election,state_election.winner_vote, by = c('st_name','year','ac_no'),x.all = TRUE )
Nat_election$won = ifelse(Nat_election$totvotpoll == Nat_election$win_vote,TRUE, FALSE)
St_election$won = ifelse(St_election$totvotpoll == St_election$win_vote,TRUE, FALSE)
summary(Nat_election)
summary(St_election)
subset(St_election,is.na(proportion))
subset(St_election,win_vote == 0)
NROW(subset(St_election,win_vote == 0))
NROW(subset(St_election,st_name == 'Arunachal Pradesh' & year == 1978 &  ac_no = 29))
NROW(subset(St_election,st_name == 'Arunachal Pradesh' & year == 1978 &  ac_no == 29))
subset(St_election,st_name == 'Arunachal Pradesh' & year == 1978 &  ac_no == 29)
